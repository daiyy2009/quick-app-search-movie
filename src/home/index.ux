<template>
    <div class="container">
        <div>
            <input id="search" class="search-input" value="{{searchKeywords}}" enterkeytype="search" placeholder="请输入电影名称、导演或演员" onchange="setSearchKey">
            </input>
            <input class="search-btn" type="button" value="搜索" onclick="doSearch({index:3})" />
        </div>

        <!--tab组件-->
        <tabs onchange="changeTab">
            <tab-bar class="tab-bar">
                <!-- https://api.douban.com/v2/movie/search?q=张艺谋 -->
                <text class="tab-text">正在热映</text>
                <!-- https://api.douban.com/v2/movie/in_theaters?count=20 -->
                <text class="tab-text">即将上映</text>
                <!-- https://api.douban.com/v2/movie/coming_soon?count=20 -->
                <text class="tab-text">最近热门</text>
                <!-- https://api.douban.com/v2/movie/top250?count=20 -->
                <!-- detail -->
                <!-- http://api.douban.com/v2/movie/subject/1292052 -->
            </tab-bar>

            <tab-content class="tab-content">
                <!--热门-->
                <div class="content-container" for="[0,0,0]">
                    <div if="{{isShowLoadNew}}" class="load-new">
                        <progress type="circular"></progress>
                        <text>{{loadNewText}}</text>
                    </div>
                    <div if="{{isShowNodata}}" class="nodata">
                        <text>{{nodataText}}</text>
                    </div>
                    <list class="list" onscrollbottom="loadMoreData" onscrolltop="loadNewData">
                        <list-item class="item" type="movie-item" for="moveList" @click="detail($item.id, $item.title)">
                            <div class="item-image">
                                <image src="{{$item.images.small}}"></image>
                            </div>
                            <text class="item-title">{{$item.title}}</text>
                            <div class="rating">
                                <rating class="rating-item" rating="{{$item.rating.average}}" indicator="true"></rating>
                                <text class="rating-score">{{$item.rating.average.toFixed(1)}}</text>
                            </div>
                        </list-item>
                    </list>

                    <div if="{{isShowLoadMore}}" class="load-more">
                        <progress type="circular"></progress>
                        <text>{{loadMoreText}}</text>
                    </div>
                </div>
            </tab-content>
        </tabs>
    </div>
</template>

<style lang="less">
    .container {
        flex-direction: column;
        color: #bbbbbb;

        .search-input {
            flex: 5;
            margin: 5px;
            border-radius: 5px;
            border-width: 2px;
            padding: 2px 10px;
            border-color: #2277AA;
            color: #666666;
            font-size: 32px;
        }

        .search-btn {
            flex: 1;
            height: 80px;
            text-align: center;
            border-radius: 10px;
            margin: 5px;
            color: #ffffff;
            font-size: 32px;
            background-color: #2277AA;
        }

        .tab-bar {
            height: 100px;
            border-color: #bbbbbb;
            border-bottom-width: 1px;

            .tab-text {
                width: 300px;
                height: 100px;
                text-align: center;
                font-size: 36px;

                &:active {
                    border-color: #2277AA;
                    border-bottom-width: 5px;
                    color: rgb(34, 119, 170);
                }
            }
        }

        .tab-content {
            flex: 1;
            padding: 5px;

            .content-container {
                flex-direction: column;

                .list {
                    columns: 3;
                    flex-direction: column;

                    .item {
                        height: 400px;
                        margin: 8px 8px 30px 8px;
                        flex-direction: column;

                        .item-image {
                            flex: 8;

                            image {
                                width: 100%;
                                height: 100%;
                            }
                        }

                        .item-title {
                            flex: 1.7;
                            lines: 2;
                            text-overflow: ellipsis;
                        }

                        .rating {
                            flex: 1;

                            .rating-item {
                                flex: 4
                            }

                            .rating-score {
                                flex: 1;
                                text-align: right;
                            }
                        }
                    }
                }

                .load-more,
                .load-new,
                .nodata {
                    justify-content: center;
                    align-items: center;
                    height: 100px;
                }

                .load-new {}
            }
        }
    }
</style>

<script>
    import prompt from '@system.prompt'
    import fetch from '@system.fetch'
    import router from '@system.router'
    import storage from '@system.storage'

    export default {
        data: {
            urlType: 'in_theaters',
            keyMap: {
                0: 'in_theaters',
                1: 'coming_soon',
                2: 'top250',
                3: 'search'
            },

            count: 21,
            start: 0,
            total: 0,

            searchKeywords: '',

            moveList: [],

            isShowLoadMore: false,
            isShowLoadNew: false,
            isShowNodata: false,
            loadMoreText: '加载数据',
            loadNewText: '正在加载最新数据',
            nodataText: '没有你要找的内容，可以换个关键词试试',
        },
        onInit() {
            if (this.moveList.length === 0) {
                this._loadListData();
            }
        },
        changeTab(e) {
            this.searchKeywords = ''
            this._resetLoadData()
            this.urlType = this.keyMap[e.index]
            this._loadListData()
        },
        setSearchKey(e) {
            this.searchKeywords = e.value;
        },
        doSearch(e) {
            if (!this.searchKeywords) return;

            this._resetLoadData()
            this.urlType = this.keyMap[e.index]
            this._loadListData()
        },
        loadNewData() {
            let localData = storage.get({
                key: 'lastLoadTime',
                success: (data) => {
                    let currentTime = new Date().getTime();
                    if (data && (currentTime - data) / 3600000 < 1) {
                        // prompt.showToast({
                        //     message: "当前数据已是最新"
                        // })
                        return;
                    }
                    this._excuteLoadNewData()
                },
                fail: (error) => {
                    this._excuteLoadNewData()
                }
            });
        },
        _excuteLoadNewData() {
            this._resetLoadData()
            storage.clear();
            this.loadMoreText = '正在加载最新数据'
            this.isShowLoadMore = true;
            this._loadListData()
            this._upsertStorage('lastLoadTime', new Date().getTime());
        },
        loadMoreData() {
            if (this.start < this.total) {
                this.start = this.start + this.count
                this.loadMoreText = '加载更多'
                this._loadListData()
            } else {
                console.log('no more data.')
            }
        },
        detail(movieId, movieTitle) {
            router.push({ 'uri': 'detail', params: { movieId, movieTitle } });
        },
        _getUrl(key) {
            let searchInfo = this.searchKeywords ? `&q=${this.searchKeywords}` : ''
            return `https://api.douban.com/v2/movie/${key}?count=${this.count}&start=${this.start}${searchInfo}`
        },
        _loadListData() {
            // ----- use mock data begin ------
            // this.moveList = Object.values(this.$app.$def.mock.movieData)[1].subjects
            // return
            // ----- use mock data end   ------
            let localData = storage.get({
                key: this._getStorageKey(),
                success: (data) => {
                    if (data) {
                        this._handleData(JSON.parse(data))
                    } else {
                        this._fetchData()
                    }
                },
                fail: (error) => {
                    this._fetchData()
                }
            });

        },
        _fetchData() {
            this.isShowLoadMore = true;
            fetch.fetch({
                url: this._getUrl(this.urlType),
                success: (result) => {
                    let dataObj = JSON.parse(result.data)

                    if (dataObj.code === 112) {
                        prompt.showToast({
                            message: "对不起，已到达API调用次数限制，请1分钟后再使用本软件。"
                        })

                        this.isShowLoadNew = false;
                        this.isShowLoadMore = false;
                        return
                    }

                    this.isShowLoadNew = false;
                    this.isShowLoadMore = false;

                    this._handleData(dataObj);
                    this._upsertStorage(this._getStorageKey(), result.data);
                },
                fail: (data, code) => {
                    prompt.showToast({
                        message: "数据加载失败"
                    })

                    this.isShowLoadNew = false;
                    this.isShowLoadMore = false;
                }
            })
        },
        _handleData(data) {
            this.start = data.start;
            this.total = data.total;
            this.moveList = this.moveList.concat(data.subjects);

            if (this.moveList.length === 0) {
                this.isShowNodata = true
            }
        },
        _resetLoadData() {
            this.start = 0
            this.total = 0
            this.moveList = []
            this.isShowNodata = false;
        },
        _getStorageKey() {
            return `list-${this.urlType}-${this.start}-${this.searchKeywords}`
        },
        _upsertStorage(key, value) {
            storage.set({ key, value });
        }
    }
</script>
